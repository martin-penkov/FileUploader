@using FileUploader.Client.Services.AlertService
@using FileUploader.Client.Services.FileUploadService
@using FileUploader.Common.Communication
@using System.Net.Http.Headers
@inject HttpClient Http
@inject IAlertService AlertService
@inject IFileUploadService FileUploadService

<PageTitle>Upload Files</PageTitle>

<label for="inputFile" class="btn btn-secondary me-5 input-btn">
    <InputFile id="inputFile" OnChange="@OnInputFileChange" multiple class="d-none" />
    Upload Files
</label>

@code {
    [Parameter]
    public EventCallback OnNewFile { get; set; }

    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<UploadResult> uploadResults = new List<UploadResult>();

    long chunkSize = 1000000;


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        IReadOnlyList<IBrowserFile> allFiles = e.GetMultipleFiles(maxAllowedFiles);

        if (allFiles.Any(f => f.Size == 0))
        {
            AlertService.ShowAlert($"Empty file upload. Please upload valid files only!");
            return;
        }

        List<IBrowserFile> smallFiles = allFiles.Where(f => f.Size <= chunkSize).ToList();
        List<IBrowserFile> largeFiles = allFiles.Where(f => f.Size >= chunkSize).ToList();


        if (smallFiles.Count > 0)
        {
            HttpContent content = FileUploadService.CreateStreamContentForFiles(smallFiles, maxFileSize);
            await FileUploadService.MakeApiRequestForSmallFiles(content);
        }

        foreach (IBrowserFile file in largeFiles)
        {
            await FileUploadService.UploadFileInChunks(file, chunkSize);
        }

        await OnNewFile.InvokeAsync();
    }
}
