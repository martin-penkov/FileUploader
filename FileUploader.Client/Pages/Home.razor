@page "/"
@using FileUploader.Client.Services.AlertService
@using FileUploader.Common.Communication
@inject HttpClient Http
@inject IJSRuntime JS
@inject IAlertService AlertService

<PageTitle>Files</PageTitle>

<div class="p-3 top-row navbar navbar-dark bg-dark">
    <FileUploader.Client.Shared.UploadInput OnNewFile="RefreshFiles"></FileUploader.Client.Shared.UploadInput>
</div>


<section class="content px-5">
    <h1>All public Files:</h1>

    @if (files == null)
    {
        <p>Loading files...</p>
    }
    else if (files.Count == 0)
    {
        <p>No files available.</p>
    }
    else
    {
        <ul class="file-list">
            @foreach (var file in files)
            {
                <li class="file-item">
                    <div class="file-info">
                        <span class="file-name">@file.FileName</span>
                        <span class="file-size">(@BytesToMb(file.Size) MB)</span>
                        <span class="file-extension">.@file.Extension</span>
                    </div>
                    <div class="button-container">
                        <button class="delete-btn" @onclick="() => ShowDeleteModal(file.FileName)">Delete</button>
                        <button class="download-btn" @onclick="() => DownloadFile(file.FileName)">Download</button>
                    </div>
                </li>
            }
        </ul>
    }

    @if (showDeleteModal)
    {
        <div class="modal-overlay" @onclick="HideDeleteModal">
            <div class="modal" @onclick:stopPropagation="true">
                <h3>Are you sure you want to delete this file?</h3>
                <p>@fileToDelete</p>
                <button class="confirm-btn" @onclick="() => DeleteFile(fileToDelete)">Yes, Delete</button>
                <button class="cancel-btn" @onclick="HideDeleteModal">Cancel</button>
            </div>
        </div>
    }
</section>

@code {
    private List<UploadResult> files;
    private bool showDeleteModal = false;
    private string fileToDelete;

    protected override async Task OnInitializedAsync()
    {
        await RefreshFiles();
    }

    private async Task RefreshFiles()
    {
        files = await Http.GetFromJsonAsync<List<UploadResult>>("/files/publicFiles");
    }

    private async Task DownloadFile(string fileName)
    {
        string apiUrl = $"/files/download?fileName={fileName}";

        HttpResponseMessage response = await Http.GetAsync(apiUrl);

        if (response.IsSuccessStatusCode)
        {
            byte[] fileBytes = await response.Content.ReadAsByteArrayAsync();
            string fullFileName = response.Content.Headers.ContentDisposition?.FileNameStar;

            await JS.InvokeVoidAsync("downloadMyFile", fileBytes, fullFileName);
        }
        else
        {
            AlertService.ShowAlert(await response.Content.ReadAsStringAsync());
            Console.WriteLine($"Failed to download file: {response.StatusCode}");
        }
    }

    private async Task DeleteFile(string fileName)
    {
        string apiUrl = $"/files/delete?fileName={fileName}";

        HttpResponseMessage response = await Http.DeleteAsync(apiUrl);

        if (response.IsSuccessStatusCode)
        {
            await RefreshFiles();
            HideDeleteModal();
        }
        else
        {
            HideDeleteModal();
            AlertService.ShowAlert(await response.Content.ReadAsStringAsync());
            Console.WriteLine($"Failed to delete file: {response.StatusCode}");
        }
    }

    private void ShowDeleteModal(string fileName)
    {
        fileToDelete = fileName;
        showDeleteModal = true;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
        fileToDelete = null;
    }

    private string BytesToMb(long sizeInBytes)
    {
        return (sizeInBytes / (1024m * 1024m)).ToString("0.000");
    }
}
